" general settings -------------------------------------------------------------

" execute pathogen#infect()
filetype plugin on
filetype indent on
syntax enable
syntax on

set background=dark
colorscheme darkblue

" no swap files
set noswapfile

" ctags settings for java/scala autocompletion
" set tags=tags;/

" java ctags settings
autocmd FileType java set tags=.tags

" set search path to current directory at start time
set path=$PWD/**

" allow to keep buffers in the background
set hidden

" ------------------------------------------------------------------------------




" view settings --------------------------------------------------------

" set number          " show line number
set relativenumber  " show relative line number
set ruler           " show column number
set hlsearch        " highlight search
set colorcolumn=81  " showing right margin

" show vertical & horizontal lines crossing at cursor position
set cursorline
set cursorcolumn
hi CursorLine ctermbg=234
hi CursorColumn ctermbg=234

" ------------------------------------------------------------------------------




" tab/spacing settings ---------------------------------------------------------

set expandtab           " swap tab with spaces
set tabstop=2           " how many space a tab char takes
set shiftwidth=2        " how many spaces are added/removed with shift commands
set softtabstop=2       " backspace remove as many space a tab width
set autoindent

autocmd FileType go setlocal ts=2 sts=2 sw=2 noexpandtab
autocmd FileType ruby setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType python setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType java setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType scala setlocal ts=2 sts=2 sw=2 expandtab

" folding options
set foldmethod=indent
set nofoldenable
set foldnestmax=10
set foldlevel=1

" ------------------------------------------------------------------------------




" Custom mapping ---------------------------------------------------------------

" show buffer list and wait for a buffer number
nnoremap gb :ls<CR>:b<Space>

" switch between buffers
nmap <C-b>n :bn<CR>
nmap <C-b>p :bp<CR>

" recenter screen
nmap <space> zz

"LocalLeader remapping
" nmap <C-\> <LocalLeader>

" use mouse wheel to scroll
set mouse=a
map <ScrollWheelUp> <C-Y><C-Y><C-Y>
map <ScrollWheelDown> <C-E><C-E><C-E>

" normal arrow-like navigation
noremap j h
noremap i k
noremap k j

" better split tabs navigation
noremap <C-H> <C-W><C-K>
noremap <C-L> <C-W><C-L>
noremap <C-J> <C-W><C-H>
noremap <C-K> <C-W><C-J>

" Whole file navigation
noremap J 0
noremap L $
noremap I gg
noremap K G

" tab navigation
nnoremap gj gT
nnoremap gl gt
nnoremap gJ 1gt
nnoremap gL 1gtgT

" remap join-lines from 'J', and turn off Ex mode too
noremap Q J

" remap insert and Insert to 's' just next to 'a'ppend
nnoremap s i
nnoremap S I

" TODO:
"   fix ci? or di? in visual mode

" ------------------------------------------------------------------------------




" Visual hints -----------------------------------------------------------------

" show unwanted characters: trailing/beginning whitespaces and tabs
highlight tabs ctermbg=darkgreen guibg=darkgreen
match tabs /\t/

" show whitespaces at beginning of line
highlight ws_beg ctermbg=blue guibg=blue
match ws_beg /^\s\+/
" autocmd BufWinEnter * match ws_beg /^\s\+/
" autocmd InsertLeave * match ws_beg /^\s\+/
" autocmd BufWinLeave * call clearmatches()

" show trailing whitespaces
highlight ws_end ctermbg=red guibg=red
match ws_end /\s\+$/
autocmd BufWinEnter * match ws_end /\s\+$/
autocmd InsertEnter * match ws_end /\s\+\%#\@<!$/
autocmd InsertLeave * match ws_end /\s\+$/
autocmd BufWinLeave * call clearmatches()

" show matching brackets
set showmatch

" ------------------------------------------------------------------------------




" GO lang settings -------------------------------------------------------------

" go compiler plugin
autocmd FileType go compiler go

let g:golang_goroot = "$HOME/Go/" " should probably use GOROOT ?
let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" ------------------------------------------------------------------------------




" OCaml settings ---------------------------------------------------------------

" Merlin: Vim needs to be built with Python scripting support, and must be
" able to find Merlin's executable on PATH.
if executable('ocamlmerlin') && has('python')
  let s:ocamlmerlin = substitute(system('opam config var share'), '\n$', '', '''') . "/ocamlmerlin"
  execute "set rtp+=".s:ocamlmerlin."/vim"
  execute "set rtp+=".s:ocamlmerlin."/vimbufsync"
endif

" ocp-indent
"autocmd FileType ocaml source substitute(system('opam config var share'), '\n$', '', '''') . "/typerex/ocp-indent/ocp-indent.vim"

" ------------------------------------------------------------------------------
